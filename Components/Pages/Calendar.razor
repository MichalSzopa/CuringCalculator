@page "/calendar"

@using CuringCalculator.Data
@using CuringCalculator.Data.Models
@using CuringCalculator.Shared.Models

@inject LocalDbService localDbService

@using System.Globalization

@if (@curings == null)
{
    <h1>Loading...</h1>
}
else
{
    <div>
        <button @onclick="PreviousMonth">&lt;</button>
        <span>@CurrentMonth.ToString("MMMM yyyy")</span>
        <button @onclick="NextMonth">&gt;</button>
    </div>
    <table>
        <thead>
            <tr>
                @foreach (var day in GetDaysOfWeek())
                {
                    <th>@day</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var week in month.Weeks)
            {
                <tr>
                    @foreach (var cell in week)
                    {
                        @if(!cell.IsClicked)
                        {
                            <td>
                                <div class="day-cell" @onclick="@(e => month.CellClicked(cell.DayNumber))">
                                    <span>@(cell.DayNumber > 0 ? cell.DayNumber : "")</span>
                                    @if (cell.Events.Count > 0)
                                    {
                                        @if (cell.Events.Count < 4)
                                        {
                                            <div>
                                                @foreach (var evencior in cell.Events)
                                                {
                                                    @if (cell.Events.FirstOrDefault().EventType == EventType.Beginning)
                                                    {
                                                        <span style="color:green">■</span>
                                                    }
                                                    else
                                                    {
                                                        <span style="color:red">■</span>
                                                    }
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <span>4+</span>
                                        }
                                    }
                                </div>
                            </td>
                        }
                        else
                        {
                            <td style="background-color:dodgerblue">
                                <div class="day-cell" @onclick="@(e => month.CellClicked(cell.DayNumber))">
                                    <span>@(cell.DayNumber > 0 ? cell.DayNumber : "")</span>
                                    @if (cell.Events.Count > 0)
                                    {
                                        @if (cell.Events.Count < 4)
                                        {
                                            <div>
                                                @foreach (var evencior in cell.Events)
                                                {
                                                    @if (cell.Events.FirstOrDefault().EventType == EventType.Beginning)
                                                    {
                                                        <span style="color:green">■</span>
                                                    }
                                                    else
                                                    {
                                                        <span style="color:red">■</span>
                                                    }
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <span>4+</span>
                                        }
                                    }
                                </div>
                            </td>
                        }
                        
                    }
                </tr>
            }
        </tbody>
    </table>

    @if (month.GetSelectedCell != null && month.GetSelectedCell.Events.Count > 0)
    {
        <table class="mt-5">
            <thead>
                <tr>
                    <td>Metoda</td>
                    <td>Mięso</td>
                    <td>Początek</td>
                    <td>Koniec</td>
                </tr>
            </thead>
            <tbody>
                @foreach(var monthEvent in month.GetSelectedCell.Events)
                {
                    <tr>
                        <td>@monthEvent.Curing.MethodName</td>
                        <td>@monthEvent.Curing.MeatAmount</td>
                        <td>@monthEvent.Curing.StartDate.ToShortDateString()</td>
                        <td>@monthEvent.Curing.EndDate.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {

    List<CuringForListModel> curings { get; set; }
    Month month { get; set; }

    protected override async Task OnInitializedAsync()
    {
        curings = await localDbService.GetCuringsForList();
        CurrentMonth = DateTime.Today;
        month = new();
        month.Weeks = GetWeeksInMonth(CurrentMonth);
    }

    private DateTime CurrentMonth = DateTime.Today;

    private void NextMonth()
    {
        CurrentMonth = CurrentMonth.AddMonths(1);
    }

    private void PreviousMonth()
    {
        CurrentMonth = CurrentMonth.AddMonths(-1);
    }

    private IEnumerable<string> GetDaysOfWeek()
    {
        return CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames;
    }

    private List<List<CalendarCell>> GetWeeksInMonth(DateTime month)
    {
        var curingsForMonth = curings.Where(c => c.StartDate.Month == month.Month || c.EndDate.Month == month.Month).ToList();

        var weeks = new List<List<CalendarCell>>();
        var firstDayOfMonth = new DateTime(month.Year, month.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
        var currentWeek = new List<CalendarCell>();

        // Fill in leading empty cells if the first day of the month is not a Sunday
        for (var i = 0; i < (int)firstDayOfMonth.DayOfWeek; i++)
        {
            currentWeek.Add(new CalendarCell(0, new List<EventDetails>()));
        }

        // Fill in the days of the month
        for (var date = firstDayOfMonth; date <= lastDayOfMonth; date = date.AddDays(1))
        {
            var curingsForDay = curingsForMonth.Where(c => c.StartDate.Day == date.Day || c.EndDate.Day == date.Day).ToList();
            List<EventDetails>? events = new List<EventDetails>();
            foreach (var curing in curingsForDay)
            {
                events.Add(new EventDetails()
                    {
                        Curing = curing,
                        EventType = curing.StartDate.Day == date.Day ? EventType.Beginning : EventType.Ending
                    });
            }

            currentWeek.Add(new CalendarCell(date.Day, events));
            if (date.DayOfWeek == DayOfWeek.Saturday || date == lastDayOfMonth)
            {
                weeks.Add(currentWeek);
                currentWeek = new List<CalendarCell>();
            }
        }

        return weeks;
    }

    class Month
    {
        public IEnumerable<IEnumerable<CalendarCell>> Weeks { get; set; }

        public CalendarCell? GetSelectedCell { get; set; }

        public void CellClicked(int dayNumber)
        {
            foreach(var week in Weeks)
            {
                foreach(var day in week)
                {
                    if(day.DayNumber == dayNumber)
                    {
                        day.IsClicked = true;
                        GetSelectedCell = day;
                    }
                    else
                    {
                        day.IsClicked = false;
                    }
                }
            }
        }
    }

    class CalendarCell
    {
        public int DayNumber { get; }

        public bool IsClicked { get; set; }

        public List<EventDetails> Events { get; }

        public CalendarCell(int dayNumber, List<EventDetails> events)
        {
            DayNumber = dayNumber;
            Events = events;
            IsClicked = false;
        }
    }

    class EventDetails
    {
        public EventType EventType { get; set; }

        public CuringForListModel Curing { get; set; }
    }

    enum EventType
    {
        Beginning,
        Ending
    }
}