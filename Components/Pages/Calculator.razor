@page "/"
@using CommunityToolkit.Maui.Core
@using CuringCalculator.Data
@using CuringCalculator.Data.Models
@using CuringCalculator.Shared.Models
@using CommunityToolkit.Maui.Alerts;

@inject LocalDbService localDbService

@* translations are going to be resolved later *@

@* todo fix inline style, css class not working for predefined Blazor fields ????*@
<h1>Kalkulator</h1>

<div class="mb-2">
    <div class="mb-2">
        Wybierz metodę
        <InputSelect 
            style="padding: 8px; border: 1px solid #ccc; border-radius: 7px; background-color: #f8f8f8; font-size: 14px;"
            @bind-Value="selectedMethodId"
        >
            <option value ="0">Wybierz</option>
            @if ( methods != null)
            {
                @foreach (var method in methods)
                {
                    <option value="@method.Id">@method.Name</option>
                }
            }
        </InputSelect>
    </div>

    @if (selectedMethod != null)
    {
        <div class="mb-2">
            Podaj ilość dni
            <InputSelect 
                style="padding: 8px; border: 1px solid #ccc; border-radius: 7px; background-color: #f8f8f8; font-size: 14px;"
                @bind-Value="selectedDaysIntervalId"
            >
                <option value="0">Wybierz</option>
                @if (daysIntervalsForMethod != null)
                {
                    @foreach (var interval in daysIntervalsForMethod)
                    {
                        <option value="@interval.Id">@interval.DisplayedValue</option>
                    }
                }
            </InputSelect>
        </div>

        @if (selectedInterval != null)
        {
            <div>
                Podaj ilość mięsa [kg]
                <input style="width: 50%" type="text" inputmode="numeric" @bind-value="meatAmount" class="form-input">
            </div>
        }
    }

</div>

@if (selectedMethod != null && selectedInterval != null && meatAmount > 0)
{
    <div class="form mt-1">
        <div>
            <span>Peklosól: @minCuringSaltAmount.ToString("F1") - @maxCuringSaltAmount.ToString("F1") [g]</span>
        </div>

        <div>
            <span>Cukier opcjonalnie: @sugarMin.ToString("F1") - @sugarMax.ToString("F1") [g]</span>
        </div>

        <div>
            <span>Woda: @waterAmount.ToString("F1") [l]</span>
        </div>

        <div>
            <span>Nastrzyk na kg mięsa: @singleInjection.ToString("F1") [ml]</span>
        </div>

        <div>
            <span>Nastrzyk łącznie: @totalInjections.ToString("F1") [ml]</span>
        </div>

        <div>
            <span>Masowanie po nastrzyku: @massaging </span>
        </div>
    </div>

    @if (!curingAddingInProgress)
    {
        <div class="w-100 button-container ">
            <button @onclick="switchAddingForm" class="round-button mt-5">
            Dodaj peklowanie
            </button>
        </div>
    }
    

    @if (curingAddingInProgress)
    {
        <div class="mt-1">
            <span class="w-50">Podaj ilość dni</span>
            <input class="w-50 form-input" type="text" inputmode="numeric" @bind-value="days">
        </div>

        <div class="mt-1">
            <span class="w-50">Podaj ilość soli</span>
            <input type="text" inputmode="numeric" @bind-value="saltAmount" class="form-input">
        </div>

        <div class="mt-1">
            <span class="w-50">Podaj ilość cukru</span>
            <input type="text" inputmode="numeric" @bind-value="sugarAmount" class="w-50 form-input">
        </div>

        <div class="mt-1">
            <span class="w-25">Uwagi</span>
            <input type="text" inputmode="text" @bind-value="comments" class="w-75 form-input">
        </div>

        <div class ="mt-1">
            <span class="w-50">Początek peklowania</span>
            <InputDate 
                style="padding: 5px; border: 1px solid #ccc; border-radius: 4px; background-color: #f8f8f8; font-size: 14px;"
                class="w-50" 
                Type="InputDateType.Date" 
                @bind-Value="@startDate" 
             />
        </div>

        <div class="mt-1" style="display: flex; align-items: center;">
            <span>Powiadomienie na końcu peklowania</span>
            <input type="checkbox" @bind-value="@notificationSend" class="notification-checkbox" />
        </div>

        <div class="buttons-container mt-4">
            <button @onclick="addCuring" class="save-button">
                Zapisz
            </button>

            <button @onclick="cancelAdding" class="cancel-button">
                Anuluj
            </button>
        </div>
    }
}

@code {

    // Inputs
    IEnumerable<Method>? methods;

    int? selectedMethodId = 0;

    Method? selectedMethod { get => methods == null ? null : methods.Where(m => m.Id == selectedMethodId).FirstOrDefault(); }

    int? selectedDaysIntervalId = 0;

    IEnumerable<DaysInterval>? daysIntervals = null;

    IEnumerable<DaysInterval>? daysIntervalsForMethod { get => selectedMethodId == 0 ? null : daysIntervals.Where(di => di.MethodId == selectedMethodId.Value).ToList(); }

    DaysInterval? selectedInterval { get => selectedMethod == null || selectedDaysIntervalId == 0 ? null : daysIntervalsForMethod.Where(i => i.Id == selectedDaysIntervalId).FirstOrDefault(); }

    decimal meatAmount = 0;

    bool curingAddingInProgress = false;

    decimal sugarAmount { get; set; }

    decimal saltAmount { get; set; }

    int days { get; set; }

    string comments { get; set; }

    DateTime startDate { get; set; }

    bool notificationSend { get; set; }

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        methods = await localDbService.GetMethods();
        daysIntervals = await localDbService.GetIntervals();
    }

    void switchAddingForm()
    {
        curingAddingInProgress = !curingAddingInProgress;
        days = selectedInterval.MinDay;
        startDate = DateTime.Now;
        saltAmount = minCuringSaltAmount;
        sugarAmount = sugarMin;
        comments = string.Empty;
        notificationSend = true;
    }

    async Task addCuring()
    {
        var curingToAdd = new AddCuringModel()
            {
                MeatAmount = meatAmount,
                SugarAmount = sugarAmount,
                SaltAmount = saltAmount,
                Days = days,
                Comments = comments,
                MethodId = selectedMethodId.Value,
                StartDate = startDate,
                EndDate = startDate + TimeSpan.FromDays(days),
            };

        await localDbService.AddCuring(curingToAdd);
        curingAddingInProgress = false;

        // display toast
        CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
        string text = "Dodano peklowanie";
        ToastDuration duration = ToastDuration.Short;
        double fontSize = 14;
        var toast = Toast.Make(text, duration, fontSize);
        await toast.Show(cancellationTokenSource.Token);
    }

    void cancelAdding()
    {
        curingAddingInProgress = false;
    }

    // Displayed values
    int singleInjection { get => selectedInterval == null ? 0 : selectedInterval.SingleInjection; } // [ml]

    decimal totalInjections { get => selectedInterval == null ? 0 : selectedInterval.SingleInjection * meatAmount; } // [ml]

    decimal waterAmount { get => meatAmount * 0.4m; } // [l]

    decimal minCuringSaltAmount { get => selectedInterval == null ? 0m : meatAmount * selectedInterval.MinSalt; } // [g]

    decimal maxCuringSaltAmount { get => selectedInterval == null ? 0m : meatAmount * selectedInterval.MaxSalt; } // [g]

    decimal sugarMin { get => 0.01m * (waterAmount * 1000m + minCuringSaltAmount); } //[g]

    decimal sugarMax { get => 2m * sugarMin; } //[g]

    string massaging { get => selectedInterval == null ? "" : selectedInterval.Massaging ? "tak" : "nie"; }
}
