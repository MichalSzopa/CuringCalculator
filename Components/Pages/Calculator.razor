@page "/"
@using CuringCalculator.Data
@using CuringCalculator.Data.Models

@inject LocalDbService localDbService

@* translations are going to be resolved later *@
<div class="form mb-4">
    <div class="mb-4">
        Wybierz metodę
        <InputSelect @bind-Value="selectedMethodId">
            <option value ="0">Wybierz</option>
            @if ( methods != null)
            {
                @foreach (var method in methods)
                {
                    <option value="@method.Id">@method.Name</option>
                }
            }
        </InputSelect>
    </div>

    @if (selectedMethod != null)
    {
        <div class="mb-4">
            Podaj ilość dni
            <InputSelect @bind-Value="selectedDaysIntervalId">
                <option value="0">Wybierz</option>
                @if (daysIntervalsForMethod != null)
                {
                    @foreach (var interval in daysIntervalsForMethod)
                    {
                        <option value="@interval.Id">@interval.DisplayedValue</option>
                    }
                }
            </InputSelect>
        </div>

        @if (selectedInterval != null)
        {
            <div>
                Podaj ilość mięsa [kg]
                <input type="text" inputmode="numeric" @bind-value="meatAmount">
            </div>
        }
    }

</div>

@if (selectedMethod != null && selectedInterval != null && meatAmount > 0)
{
    <div class="form">
        <div>
            <span>Peklosól: @minCuringSaltAmount.ToString("F1") - @maxCuringSaltAmount.ToString("F1") [g]</span>
        </div>

        <div>
            <span>Cukier opcjonalnie: @sugarMin.ToString("F1") - @sugarMax.ToString("F1") [g]</span>
        </div>

        <div>
            <span>Woda: @waterAmount.ToString("F1") [l]</span>
        </div>

        <div>
            <span>Nastrzyk na kg mięsa: @singleInjection.ToString("F1") [ml], łącznie: @totalInjections.ToString("F1") [ml]</span>
        </div>

        <div>
            <span>Masowanie po nastrzyku: @massaging </span>
        </div>
    </div>
}

@code {

    // Inputs
    IEnumerable<Method>? methods;

    int? selectedMethodId = 0;

    Method? selectedMethod { get => methods == null ? null : methods.Where(m => m.Id == selectedMethodId).FirstOrDefault(); }

    int? selectedDaysIntervalId = 0;

    IEnumerable<DaysInterval>? daysIntervals = null;

    IEnumerable<DaysInterval>? daysIntervalsForMethod { get => selectedMethodId == 0 ? null : daysIntervals.Where(di => di.MethodId == selectedMethodId.Value).ToList(); }

    DaysInterval? selectedInterval { get => selectedMethod == null || selectedDaysIntervalId == 0 ? null : daysIntervalsForMethod.Where(i => i.Id == selectedDaysIntervalId).FirstOrDefault(); }

    decimal meatAmount = 0;

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        methods = await localDbService.GetMethods();
        daysIntervals = await localDbService.GetIntervals();
    }

    // Displayed values
    int singleInjection { get => selectedInterval == null ? 0 : selectedInterval.SingleInjection; } // [ml]

    decimal totalInjections { get => selectedInterval == null ? 0 : selectedInterval.SingleInjection * meatAmount; } // [ml]

    decimal waterAmount { get => meatAmount * 0.4m; } // [l]

    decimal minCuringSaltAmount { get => selectedInterval == null ? 0m : meatAmount * selectedInterval.MinSalt; } // [g]

    decimal maxCuringSaltAmount { get => selectedInterval == null ? 0m : meatAmount * selectedInterval.MaxSalt; } // [g]

    decimal sugarMin { get => 0.01m * (waterAmount * 1000m + minCuringSaltAmount); } //[g]

    decimal sugarMax { get => 2m * sugarMin; } //[g]

    string massaging { get => selectedInterval == null ? "" : selectedInterval.Massaging ? "tak" : "nie"; }
}
